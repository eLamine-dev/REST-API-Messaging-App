// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  password            String
  username            String
  status              UserStatus     @default(OFFLINE)
  sentMessages        Message[]      @relation("SentMessages")
  receivedMessages    Message[]      @relation("ReceivedMessages")
  sentFriendships     Friendship[]   @relation("SentFriendships")
  receivedFriendships Friendship[]   @relation("ReceivedFriendships")
  conversations       Conversation[] @relation("UserConversations")
  ownedConversations  Conversation[] @relation("ConversationAdmin")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  bio                 String?
  profilePic          String?
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  timestamp      DateTime     @default(now())
  readAt         DateTime?
  senderId       Int
  receiverId     Int?
  conversationId Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  deletedAt      DateTime?

  @@index([senderId])
  @@index([receiverId])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  name         String
  isGroup      Boolean   @default(false)
  members      User[]    @relation("UserConversations")
  messages     Message[]
  adminId      Int?
  admin        User?     @relation("ConversationAdmin", fields: [adminId], references: [id])
  lastActivity DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Friendship {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deletedAt  DateTime?
  sender     User             @relation("SentFriendships", fields: [senderId], references: [id])
  receiver   User             @relation("ReceivedFriendships", fields: [receiverId], references: [id])
  userId     Int?

  @@unique([senderId, receiverId]) // Prevent duplicate friendships
  @@index([senderId])
  @@index([receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

enum UserStatus {
  OFFLINE
  ONLINE
}
